name: Build wheels
# run-name: Build Windows wheels on branch '${{ github.ref_name }}'
on: push
# on: workflow_dispatch
jobs:
  build_windows_wheels:
    strategy:
      matrix:
        py: [cp36, cp37, cp38, cp39, cp310]
        arch:
          - [AMD64, win_amd64, x64]
          - [x86, win32, x86]
    name: ${{ matrix.py }}-${{ matrix.arch[1] }}
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Compiled OpenBLAS
        run: |
          curl -L -o OpenBLAS-0.3.21.zip https://github.com/xianyi/OpenBLAS/releases/download/v0.3.21/OpenBLAS-0.3.21-${{ matrix.arch[2] }}.zip
          7z x OpenBLAS-0.3.21.zip -o"OpenBLAS"

      - name: Set up configuration file
        run: |
          python setup_config.py openblas libopenblas ${{ github.workspace }}\OpenBLAS\lib ${{ github.workspace }}\OpenBLAS\include

      - name: Build wheel ${{ matrix.py }}-${{ matrix.arch[1] }}
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_PLATFORM: windows
          CIBW_BUILD: ${{ matrix.py }}-${{ matrix.arch[1] }}
          CIBW_ARCHS_WINDOWS: ${{ matrix.arch[0] }}
          CIBW_BEFORE_BUILD_WINDOWS: >
            pip install delvewheel
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
            delvewheel repair --add-path ${{ github.workspace }}\OpenBLAS\bin -w {dest_dir} -v {wheel}
          CIBW_BEFORE_TEST_WINDOWS: >
            7z x test/demo.zip -o"test/demo"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels_windows_${{ matrix.arch[0] }}
          path: ./wheelhouse/*.whl

  build_macos_wheels:
    strategy:
      matrix:
        py: [cp36, cp37, cp38, cp39, cp310]
        arch:
          - [x86_64, macosx_x86_64]
    name: ${{ matrix.py }}-${{ matrix.arch[1] }}
    runs-on: macos-11
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Compiled OpenBLAS
        uses: dawidd6/action-download-artifact@v2 # TODO: only @v2??
        with:
          workflow: compile_OpenBLAS_macos.yml
          workflow_conclusion: success
          commit: ${{github.event.pull_request.head.sha}}
          name: OpenBLAS_macos_${{ matrix.arch[0] }}
          path: OpenBLAS
          search_artifacts: true

      - name: Set up configuration file
        run: |
          python3 setup_config.py openblas openblas ${{ github.workspace }}/OpenBLAS/lib ${{ github.workspace }}/OpenBLAS/include

      - name: Build wheel ${{ matrix.py }}-${{ matrix.arch[1] }}
        uses: pypa/cibuildwheel@v2.12.0
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.9
          CIBW_PLATFORM: macos
          CIBW_BUILD: ${{ matrix.py }}-${{ matrix.arch[1] }}
          CIBW_ARCHS_MACOS: ${{ matrix.arch[0] }}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            DYLD_LIBRARY_PATH=${{ github.workspace }}/OpenBLAS/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
          CIBW_BEFORE_TEST_MACOS: >
            7z x test/demo.zip -o"test/demo"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels_macos_${{ matrix.arch[0] }}
          path: ./wheelhouse/*.whl

  create_macos_arm64_check:
    name: Create MacOS arm64 check
    runs-on: ubuntu-20.04
    steps:
      - name: Create check
        run: |
          curl -X DELETE -H "Accept:application/vnd.github+json" -H "Authorization:Bearer ${{ secrets.TEST_TOKEN }}" -H "X-GitHub-Api-Version:2022-11-28" https://api.github.com/repos/nightwnvol/amico_gh_actions/actions/variables/CHECK_ARM64_ID
          CHECK_ARM64_ID=$(curl -X POST -H "Accept:application/vnd.github+json" -H "Authorization:Bearer ${{ github.token }}" -H "X-GitHub-Api-Version:2022-11-28" https://api.github.com/repos/nightwnvol/amico_gh_actions/check-runs -d '{"name":"cp*-macosx_arm64","status":"in_progress","head_sha":"'"${{github.sha}}"'"}' | jq -r .id)
          curl -X POST -H "Accept:application/vnd.github+json" -H "Authorization:Bearer ${{ secrets.TEST_TOKEN }}" -H "X-GitHub-Api-Version:2022-11-28" https://api.github.com/repos/nightwnvol/amico_gh_actions/actions/variables -d '{"name":"CHECK_ARM64_ID","value":"'"${CHECK_ARM64_ID}"'"}'

  build_linux_wheels:
    strategy:
      matrix:
        py: [cp36, cp37, cp38, cp39, cp310]
        arch:
          - [x86_64, manylinux_x86_64, amd64]
          - [aarch64, manylinux_aarch64, arm64]
    name: ${{ matrix.py }}-${{ matrix.arch[1] }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Compile OpenBLAS

      - name: Download Compiled OpenBLAS
        uses: dawidd6/action-download-artifact@v2 # TODO: only @v2??
        with:
          workflow: compile_OpenBLAS_linux.yml
          workflow_conclusion: success
          commit: ${{github.event.pull_request.head.sha}}
          name: OpenBLAS_linux_${{ matrix.arch[0] }}
          path: OpenBLAS
          search_artifacts: true

      - name: Set up configuration file
        run: | # NOTE: need to add '/host' because they will be paths into a Docker container
          python setup_config.py openblas openblas /host${{ github.workspace }}/OpenBLAS/lib /host${{ github.workspace }}/OpenBLAS/include

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.arch[2] }}

      - name: Build wheel ${{ matrix.py }}-${{ matrix.arch[1] }}
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_PLATFORM: linux
          CIBW_BUILD: ${{ matrix.py }}-${{ matrix.arch[1] }}
          CIBW_ARCHS_LINUX: ${{ matrix.arch[0] }}
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            LD_LIBRARY_PATH=/host${{ github.workspace }}/OpenBLAS/lib auditwheel repair -w {dest_dir} {wheel}
          CIBW_BEFORE_TEST_LINUX: >
            unzip test/demo.zip -d test/demo

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels_linux_${{ matrix.arch[0] }}
          path: ./wheelhouse/*.whl

  build_source_distribution:
    name: sdist
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up configuration file
        run: | # NOTE: need to add '/host' because they will be paths into a Docker container
          python setup_config.py openblas openblas ${{ github.workspace }}/OpenBLAS/lib ${{ github.workspace }}/OpenBLAS/include

      - name: Build sdist
        run: |
          pip install -U pip
          pip install -U build
          python -m build --sdist

      - name: Test sdist
        run: | # TODO: still need to build a wheel in order to link OpenBLAS. Follow the guide on the main repo
          echo TODO
# tar -xzf dist/*.tar.gz
# python setup_config.py openblas openblas ${{ github.workspace }}/OpenBLAS/lib ${{ github.workspace }}/OpenBLAS/include
# python - m build --wheel

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: ./dist/*.tar.gz      

  upload_wheels:
    needs: [build_windows_wheels, build_macos_wheels, build_linux_wheels, build_source_distribution]
    name: Upload wheels
    runs-on: ubuntu-20.04
    # if: ${{ github.ref_name == 'main' }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: List dir
        run: |
          ls -l
          ls -l artifacts/*
        
      # - name: Publish package to PyPI Test
      #   uses: pypa/gh-action-pypi-publish@v1.6.4
      #   with:
      #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      #     repository_url: https://test.pypi.org/legacy/
      #     packages_dir: artifacts/**
